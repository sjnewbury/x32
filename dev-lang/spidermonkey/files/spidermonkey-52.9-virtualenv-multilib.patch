diff -urN ./python/virtualenv/site.py ./python/virtualenv.new/site.py
--- ./python/virtualenv/site.py	2018-07-23 19:00:01.000000000 +0100
+++ ./python/virtualenv.new/site.py	2018-11-29 21:32:57.154958573 +0000
@@ -207,7 +207,7 @@
         known_paths = None
     return known_paths
 
-def addsitepackages(known_paths, sys_prefix=sys.prefix, exec_prefix=sys.exec_prefix):
+def addsitepackages(known_paths, sys_prefix=sys.prefix, exec_prefix=sys.exec_prefix, libarch=None):
     """Add site-packages (and possibly site-python) to sys.path"""
     prefixes = [os.path.join(sys_prefix, "local"), sys_prefix]
     if exec_prefix != sys_prefix:
@@ -237,13 +237,12 @@
                                          "site-packages"),
                             os.path.join(prefix, "lib", "site-python"),
                             os.path.join(prefix, "python" + sys.version[:3], "lib-dynload")]
-                lib64_dir = os.path.join(prefix, "lib64", "python" + sys.version[:3], "site-packages")
-                if (os.path.exists(lib64_dir) and
-                    os.path.realpath(lib64_dir) not in [os.path.realpath(p) for p in sitedirs]):
-                    if _is_64bit:
-                        sitedirs.insert(0, lib64_dir)
-                    else:
-                        sitedirs.append(lib64_dir)
+                if libarch is not None:
+                    libXX = "lib" + libarch
+                    libXX_dir = os.path.join(prefix, libXX, "python" + sys.version[:3], "site-packages")
+                    if (os.path.exists(libXX_dir) and
+                        os.path.realpath(libXX_dir) not in [os.path.realpath(p) for p in sitedirs]):
+                        sitedirs.insert(0, libXX_dir)
                 try:
                     # sys.getobjects only available in --with-pydebug build
                     sys.getobjects
@@ -550,7 +549,7 @@
     except ImportError:
         pass
 
-def virtual_install_main_packages():
+def virtual_install_main_packages(libarch=None):
     f = open(os.path.join(os.path.dirname(__file__), 'orig-prefix.txt'))
     sys.real_prefix = f.read().strip()
     f.close()
@@ -585,12 +584,11 @@
     else:
         paths = [os.path.join(sys.real_prefix, 'lib', 'python'+sys.version[:3])]
         hardcoded_relative_dirs = paths[:] # for the special 'darwin' case below
-        lib64_path = os.path.join(sys.real_prefix, 'lib64', 'python'+sys.version[:3])
-        if os.path.exists(lib64_path):
-            if _is_64bit:
-                paths.insert(0, lib64_path)
-            else:
-                paths.append(lib64_path)
+        if libarch is not None:
+            libXX = 'lib' + libarch
+            libXX_path = os.path.join(sys.real_prefix, libXX, 'python'+sys.version[:3])
+            if os.path.exists(libXX_path):
+                paths.insert(0, libXX_path)
         # This is hardcoded in the Python executable, but relative to
         # sys.prefix.  Debian change: we need to add the multiarch triplet
         # here, which is where the real stuff lives.  As per PEP 421, in
@@ -669,7 +667,15 @@
 
 def main():
     global ENABLE_USER_SITE
-    virtual_install_main_packages()
+    libarch = None
+    arch_file = os.path.join(os.path.dirname(__file__), 'libarch.txt')
+    if os.path.exists(arch_file):
+        arch_fp = open(arch_file)
+        try:
+            libarch = arch_fp.read().strip()
+        finally:
+            arch_fp.close()
+    virtual_install_main_packages(libarch)
     abs__file__()
     paths_in_sys = removeduppaths()
     if (os.name == "posix" and sys.path and
@@ -682,7 +688,7 @@
         ENABLE_USER_SITE = False
     if ENABLE_USER_SITE is None:
         ENABLE_USER_SITE = check_enableusersite()
-    paths_in_sys = addsitepackages(paths_in_sys)
+    paths_in_sys = addsitepackages(paths_in_sys, libarch=libarch)
     paths_in_sys = addusersitepackages(paths_in_sys)
     if GLOBAL_SITE_PACKAGES:
         paths_in_sys = virtual_addsitepackages(paths_in_sys)
diff -urN ./python/virtualenv/virtualenv.py ./python/virtualenv.new/virtualenv.py
--- ./python/virtualenv/virtualenv.py	2018-07-23 19:00:01.000000000 +0100
+++ ./python/virtualenv.new/virtualenv.py	2018-11-29 21:53:49.499100217 +0000
@@ -131,6 +131,7 @@
         REQUIRED_MODULES.extend(['warnings', 'linecache', '_abcoll', 'abc'])
     if minver >= 7:
         REQUIRED_MODULES.extend(['_weakrefset'])
+        #, 'pkgutil', 'tempfile', 'io', 'random', '__future__', 'hashlib', 'functools', 'logging', 'traceback', 'weakref', 'collections', 'keyword', 'heapq', 'atexit', 'optparse', 'textwrap', 'string', 'glob', 'StringIO', 'contextlib', 'shutil', 'subprocess', 'pickle', 'struct', 'tarfile', 'copy', 'zipfile', 'socket', 'opcode', 'dist'])
     if is_msys2:
         REQUIRED_MODULES.extend(['functools'])
 elif majver == 3:
@@ -1097,7 +1098,11 @@
     else:
         prefix = sys.prefix
     mkdir(lib_dir)
-    fix_lib64(lib_dir, symlink)
+
+    logger.notify('Using lib_dir %r' % lib_dir)
+
+    # Account for explicit /usr/lib*
+    is_libarch_explicit, libarch = fix_libarch(lib_dir, symlink)
     stdlib_dirs = [os.path.dirname(os.__file__)]
     if is_win:
         stdlib_dirs.append(join(os.path.dirname(stdlib_dirs[0]), 'DLLs'))
@@ -1138,6 +1143,14 @@
     else:
         writefile(site_filename_dst, SITE_PY)
     writefile(join(site_dir, 'orig-prefix.txt'), prefix)
+
+    # We need to record the suffix of original libdir, or the virtualenv
+    # site.py will not be able to insert the correct system package paths.
+    # Assuming that the simplicity of orig-prefix.txt may be relied upon by
+    # external programs, we have to write a new file here.
+    if is_libarch_explicit:
+        writefile(join(site_dir, 'libarch.txt'), libarch)
+
     site_packages_filename = join(site_dir, 'no-global-site-packages.txt')
     if not site_packages:
         writefile(site_packages_filename, '')
@@ -1507,38 +1520,53 @@
                     copyfile(os.path.abspath(os.path.join(home_dir, subdir_name)), \
                                                             os.path.join(local_path, subdir_name), symlink)
 
-def fix_lib64(lib_dir, symlink=True):
+def fix_libarch(lib_dir, symlink=True):
     """
-    Some platforms (particularly Gentoo on x64) put things in lib64/pythonX.Y
+    Some platforms (e.g., Gentoo on x64 and MIPS) put things in libarch/pythonX.Y
     instead of lib/pythonX.Y.  If this is such a platform we'll just create a
     symlink so lib64 points to lib
     """
     # PyPy's library path scheme is not affected by this.
     # Return early or we will die on the following assert.
     if is_pypy:
-        logger.debug('PyPy detected, skipping lib64 symlinking')
-        return
-    # Check we have a lib64 library path
-    if not [p for p in distutils.sysconfig.get_config_vars().values()
-            if isinstance(p, basestring) and 'lib64' in p]:
-        return
+        logger.debug('PyPy detected, skipping %s symlinking' % (target_dirname, ))
+        return True, None
 
-    logger.debug('This system uses lib64; symlinking lib64 to lib')
+    for arch in '64', '32', 'x32':
+        if _do_fix_libarch(lib_dir, symlink, arch):
+            return True, arch
+    return False, None
+
+def _do_fix_libarch(lib_dir, symlink, arch):
+    # Check we have an arch-specific library path
+    target_dirname = 'lib' + arch
+    logger.info("Trying to symlink libdir '%s' to lib" % (target_dirname, ))
+    if not target_dirname in distutils.sysconfig.get_config_var('LIBDIR'):
+        return False
+
+    logger.info('This system uses %s; symlinking %s to lib' % (
+        target_dirname,
+        target_dirname,
+    ))
 
     assert os.path.basename(lib_dir) == 'python%s' % sys.version[:3], (
         "Unexpected python lib dir: %r" % lib_dir)
     lib_parent = os.path.dirname(lib_dir)
     top_level = os.path.dirname(lib_parent)
     lib_dir = os.path.join(top_level, 'lib')
-    lib64_link = os.path.join(top_level, 'lib64')
+    target_lib_link = os.path.join(top_level, target_dirname)
     assert os.path.basename(lib_parent) == 'lib', (
         "Unexpected parent dir: %r" % lib_parent)
-    if os.path.lexists(lib64_link):
-        return
+    if os.path.lexists(target_lib_link):
+        return True
     if symlink:
-        os.symlink('lib', lib64_link)
+        os.symlink('lib', target_lib_link)
+    else:
+        copyfile('lib', target_lib_link)
+    if os.path.lexists(target_lib_link):
+        return True
     else:
-        copyfile('lib', lib64_link)
+        return False
 
 def resolve_interpreter(exe):
     """
@@ -1811,147 +1839,149 @@
 
 ##file site.py
 SITE_PY = convert("""
-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
-AVijEPwfucjncQ==
+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
 """)
 
 ##file activate.sh
diff -urN ./python/virtualenv/virtualenv_embedded/site.py ./python/virtualenv.new/virtualenv_embedded/site.py
--- ./python/virtualenv/virtualenv_embedded/site.py	2018-07-23 19:00:01.000000000 +0100
+++ ./python/virtualenv.new/virtualenv_embedded/site.py	2018-11-29 21:32:57.158291953 +0000
@@ -65,6 +65,7 @@
 
 import sys
 import os
+
 try:
     import __builtin__ as builtins
 except ImportError:
@@ -206,7 +207,7 @@
         known_paths = None
     return known_paths
 
-def addsitepackages(known_paths, sys_prefix=sys.prefix, exec_prefix=sys.exec_prefix):
+def addsitepackages(known_paths, sys_prefix=sys.prefix, exec_prefix=sys.exec_prefix, libarch=None):
     """Add site-packages (and possibly site-python) to sys.path"""
     prefixes = [os.path.join(sys_prefix, "local"), sys_prefix]
     if exec_prefix != sys_prefix:
@@ -236,13 +237,12 @@
                                          "site-packages"),
                             os.path.join(prefix, "lib", "site-python"),
                             os.path.join(prefix, "python" + sys.version[:3], "lib-dynload")]
-                lib64_dir = os.path.join(prefix, "lib64", "python" + sys.version[:3], "site-packages")
-                if (os.path.exists(lib64_dir) and
-                    os.path.realpath(lib64_dir) not in [os.path.realpath(p) for p in sitedirs]):
-                    if _is_64bit:
-                        sitedirs.insert(0, lib64_dir)
-                    else:
-                        sitedirs.append(lib64_dir)
+                if libarch is not None:
+                    libXX = "lib" + libarch
+                    libXX_dir = os.path.join(prefix, libXX, "python" + sys.version[:3], "site-packages")
+                    if (os.path.exists(libXX_dir) and
+                        os.path.realpath(libXX_dir) not in [os.path.realpath(p) for p in sitedirs]):
+                            sitedirs.insert(0, libXX_dir)
                 try:
                     # sys.getobjects only available in --with-pydebug build
                     sys.getobjects
@@ -549,7 +549,7 @@
     except ImportError:
         pass
 
-def virtual_install_main_packages():
+def virtual_install_main_packages(libarch=None):
     f = open(os.path.join(os.path.dirname(__file__), 'orig-prefix.txt'))
     sys.real_prefix = f.read().strip()
     f.close()
@@ -578,17 +578,17 @@
             plat_path = os.path.join(path, 'plat-%s' % sys.platform)
             if os.path.exists(plat_path):
                 paths.append(plat_path)
-    elif sys.platform == 'win32':
+    # MOZ: The MSYS2 and MinGW versions of Python have their main packages in the UNIX directory this checks specifically for the native win32 python
+    elif sys.platform == 'win32' and os.sep == '\\':
         paths = [os.path.join(sys.real_prefix, 'Lib'), os.path.join(sys.real_prefix, 'DLLs')]
     else:
         paths = [os.path.join(sys.real_prefix, 'lib', 'python'+sys.version[:3])]
         hardcoded_relative_dirs = paths[:] # for the special 'darwin' case below
-        lib64_path = os.path.join(sys.real_prefix, 'lib64', 'python'+sys.version[:3])
-        if os.path.exists(lib64_path):
-            if _is_64bit:
-                paths.insert(0, lib64_path)
-            else:
-                paths.append(lib64_path)
+        if libarch is not None:
+            libXX = 'lib' + libarch
+            libXX_path = os.path.join(sys.real_prefix, libXX, 'python'+sys.version[:3])
+            if os.path.exists(libXX_path):
+                paths.insert(0, libXX_path)
         # This is hardcoded in the Python executable, but relative to
         # sys.prefix.  Debian change: we need to add the multiarch triplet
         # here, which is where the real stuff lives.  As per PEP 421, in
@@ -667,7 +667,15 @@
 
 def main():
     global ENABLE_USER_SITE
-    virtual_install_main_packages()
+    libarch = None
+    arch_file = os.path.join(os.path.dirname(__file__), 'libarch.txt')
+    if os.path.exists(arch_file):
+        arch_fp = open(arch_file)
+        try:
+            libarch = arch_fp.read().strip()
+        finally:
+            arch_fp.close()
+    virtual_install_main_packages(libarch)
     abs__file__()
     paths_in_sys = removeduppaths()
     if (os.name == "posix" and sys.path and
@@ -680,7 +688,7 @@
         ENABLE_USER_SITE = False
     if ENABLE_USER_SITE is None:
         ENABLE_USER_SITE = check_enableusersite()
-    paths_in_sys = addsitepackages(paths_in_sys)
+    paths_in_sys = addsitepackages(paths_in_sys, libarch=libarch)
     paths_in_sys = addusersitepackages(paths_in_sys)
     if GLOBAL_SITE_PACKAGES:
         paths_in_sys = virtual_addsitepackages(paths_in_sys)
